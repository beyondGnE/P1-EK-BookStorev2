/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.p1.ek.bookstorev2;

import com.p1.ek.model.objfiles.Book;

import io.javalin.Javalin;
import io.javalin.core.JavalinConfig;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.p1.ek.controller.AuthorService;
import com.p1.ek.controller.BookAuthorLinkService;
import com.p1.ek.controller.BookGenreLinkService;
import com.p1.ek.controller.BookService;
import com.p1.ek.controller.GenreService;

public class BookStoreAPIDriver {

    // private static Logger log = LogManager.getLogger(BookStoreAPIDriver.class);

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

        

        BookService bs = new BookService();
        AuthorService as = new AuthorService();
        GenreService gs = new GenreService();
        BookAuthorLinkService bals = new BookAuthorLinkService();
        BookGenreLinkService bgls = new BookGenreLinkService();
        

        Javalin app = Javalin.create(JavalinConfig::enableCorsForAllOrigins).start(9000);

        // log.info("Wassup");
        // Get all books
        app.get("/api/books", ctx -> ctx.json(bs.readRecords(as, gs)));
        // app.get("/authors", ctx -> ctx.json(as.readRecords()));
        // app.get("/genres", ctx -> ctx.json(gs.readRecords()));

        // Get a book
        app.get("/api/books/{bookId}", ctx -> ctx.json(bs.readRecord(Integer.parseInt(ctx.pathParam("bookId")), as, gs)));

        // Post a book
        // User shouldn't have to care about ids; that information isn't available to them anyway.
        // Therefore, the json passed in would have to be specifically formatted, without ids.
        // API will then use services to internally take care of the ids.
        app.post("api/books", ctx -> {
            ObjectMapper mapper = new ObjectMapper();
            Book newBook = mapper.readValue(ctx.body(), Book.class);
            bs.createRecord(newBook, as, gs, bals, bgls);
        });

        app.put("api/books/{bookId}", ctx -> {
            ObjectMapper mapper = new ObjectMapper();
            Book modBook = mapper.readValue(ctx.body(), Book.class);
            // Book modBook = bs.readRecord(Integer.parseInt(ctx.pathParam("bookId")), as, gs);
            bs.updateRecord(modBook, as, gs, bals, bgls);
        });

        app.delete("api/books/{bookId}", ctx -> {
            Book delBook = bs.readRecord(Integer.parseInt(ctx.pathParam("bookId")), as, gs);
            bs.deleteRecord(delBook, bals, bgls);
        });

        app.get("/authors", ctx -> ctx.json(as.readRecords()));
        // System.out.println(new BookStoreAPIDriver().getGreeting());

        app.get("/genres", ctx -> ctx.json(gs.readRecords()));



        // app.post("/login", ctx -> ctx.json());
    }
}
